//
//  SBDBaseMessage.h
//  SendBird
//
//  Created by Jed Gyeong on 6/28/17.
//  Copyright Â© 2017 SendBird. All rights reserved.
//

#ifndef SENDBIRD_SBDBASEMESSAGE_H_
#define SENDBIRD_SBDBASEMESSAGE_H_

#include <iostream>
#include <vector>
#include "SBDUser.h"
#include "SBDTypes.h"

class SBDBaseChannel;

using namespace std;

/**
 *  The `SBDBaseMessage` class represents the base message which is generated by a user or an admin. The `SBDUserMessage`, the `SBDFileMessage` and the `SBDAdminMessage` are derived from this class.
 */
class SBDBaseMessage {
public:
	/**
	 *  The type of message. 
	 */
    SBDMessageType message_type;
    
    /**
     *  Unique message ID.
     */
    uint64_t message_id;
    
    /**
     *  Channel URL which has this message.
     */
    wstring channel_url;
    
    /**
     *  Message created time in millisecond(UTC).
     */
    int64_t created_at;
    
    /**
     *  Message updated time in millisecond(UTC).
     */
    int64_t updated_at;
    
	/**
	 *  The type of channel. If this message belongs to a open channel, the value is "open" string. If this channel belongs to a group channel, then the value is "group".
	 */
    wstring channel_type;

	SBDMentionType mention_type;

	/**
	*	Can mention to specific users. If sends a message with this field, the message will be arrived to mentioned users. The default value is null.
	*/
	vector<SBDUser> mentioned_users;

	/**
     *  Checks the channel type is open channel or not.
     *
     *  @return Returns true, when this is open channel.
     */
    bool IsOpenChannel();
    
    /**
     *  Checks the channel type is group channel or not.
     *
     *  @return Returns true, when this is group channel.
     */
    bool IsGroupChannel();

	/**
	 *  Internal use only
	 */
	SBDBaseMessage() {};

	/**
	 *  Internal use only
	 */
	~SBDBaseMessage() {};

	/**
	 *  Internal use only
	 */
	SBDBaseMessage(const string& dict);

	/**
	 *  Internal use only.
	 */
	static SBDBaseMessage *BuildFromDict(const string& dict);

	/**
	 *  Internal use only.
	 */
	static SBDBaseMessage *Build(const string& dict, SBDBaseChannel *channel);

	/**
	 *  Internal use only.
	 */
	static SBDBaseMessage *BuildFromData(const string& data);
};

#endif /* SENDBIRD_SBDBASEMESSAGE_H_ */
